

opt-FunctionDeclarations

ClassName opt-IdentityFields opt-ClassBlock






User





User( name:String )


lockable User( name:String )


modifiable User( name:String )


modifiable User( name:String ) {

  jsonTemplate = {"name":$name}

  xmlTemplate = <user name="$name"/>

}


UserRestfulEndPoint {

  GET /user/{id} = userRepository.fetchUser( id )    // where fetchUser returns Future<User>
                                                     // supports  'map' to HttpResponse for fine tuning responses

  POST /user = 404

  POST /user = 404 + cookie("a","b") + header("a","b")

}


request.cookies["abc"]
cookies["ABC"]  // array/map/reflection
cookies.ABC     // normal
requestHeaders[]


a.b.c    if a.b is null a.b.c evaluates to null too



lockable AccountDTO( id:String ) {
  created:DTM    = SystemClock.currentDTM()
  nameNbl:String

  constructor( id:String, createdDTM:DTM, nameNbl:String ) {
    super( id )

    this.created = createdDTM
    this.nameNbl = nameNbl
  }

  setter nameNbl( newNameNbl:String )          = this.nameNbl = newNameNbl
  getter nameNbl                      : String = this.nameNbl

  setter nameNbl = this.nameNbl = newNameNbl
  getter nameNbl = this.nameNbl

  json jsonTemplate   = { "id":${id}, "when": ${created}, "name"=${nameNbl} }
  xml  xmlTemplate    = <account id=${id} when=${created} name=${nameNbl}/>
  sql  insertTemplate = insert into ACCOUNT (id,name,created) values(${id},${nameNbl},${created})
  protobuf proto
}

interface AccountService {
  insert( account:Account ) : Void
  fetch( id:String ) : Account


  before insert( account:Account ) = println( "hello" )
  after insert( account:Account )  = {
    println( "bye" )
  }
}

mixin LoggingMixin {

  before * = log( "hello" )
  after  * = log( "bye" )


  private log( msg:String ) = println( msg )

}


use java.lang.Integer with river.lang.RichIntMixin
use river.lang.*
use river.collections.ArrayUtils.*


SCOPE
-----

defaults to public

supports public, package, protected, private



Expressions
------

        // creturn !consume(tokenizer, "(")

        if ( !consume(tokenizer,"(") ) return;



Functions
=========


add(a,b) = a+b
addition = &add


onKeypress( callback(key:Char):Void )

onKeypress( println("key: "+key) )
onKeypress( {println("key: "+key)} )
onKeypress( callback=println("key: "+key) )
onKeypress( callback(k)=println("key: "+k) )
onKeypress( callback(k:Char)=println("key: "+k) )
onKeypress( f(k)=println("key: "+k) )
onKeypress( f(k:Char)=println("key: "+k) )

callback(key) =  println("key: "+key)
onKeypress( &callback )
onKeypress( callback=&callback )




AutoConversions
------------

foo:Colour = "red"


will call   Colour.fromString("red")



or

converter fromStr( str:String ) =



Good to clean up
--------

if( healthCheck.passed ) {
  monitoringService.debug( "HealthCheck [%s] %s".format(healthCheck.testName,  healthCheck.status) )
} else {
  monitoringService.fyi( "HealthCheck [%s] %s".format(healthCheck.testName,  healthCheck.status) )
}

Using string ideas becomes

if( healthCheck.passed ) {
  monitoringService.debug( "HealthCheck [${healthCheck.testName}] ${healthCheck.status}" )
} else {
  monitoringService.info( "HealthCheck [${healthCheck.testName}] ${healthCheck.status}" )
}

then by passing method pointers as variables

m = if ( healthCheck.passed ) log.debug else log.info
m( "HealthCheck [${healthCheck.testName}] ${healthCheck.status}" )

to defer msg creation

m = if ( healthCheck.passed ) log.debug else log.info
m( `"HealthCheck [${healthCheck.testName}] ${healthCheck.status}"` )



Closures
----------

spinUntilTrue( `ctx.countThreads(threadPrefix) > 0` )

f() = `ctx.countThreads(threadPrefix) > 0`
f(a,b) = `ctx.countThreads(a) > b`
f(a,b) = `a eq b`
f(a,b) : Boolean = `a eq b`

spinUntilTrue( `f` )


map( collection:Iterable[A], f():B ) : Iterable[B]
map( collection:Iterable[A], f(a:A):B ) : Iterable[B]


map( [1,2,3], `a.toString()` )
map( [1,2,3], a.toString() )   // errors
map( [1,2,3], f(a)=a.toString() )


[1,2,3].map( `e.toString()` )
[1,2,3].map( f(e)=`e.toString()` )
[1,2,3].map( f(e)={e.toString()} )

f(e)=e.toString()
[1,2,3].map( f )



Async Web Server Ideas
================



  // user    = async cpt.getUser_1( callingUserId.get )
  // tweetId = async sendTweet( user.twitterCredentials, tweetMessage )

  // tweetId.httpStatusCode match {
  //   case 200 => httpResponse write json( {"id": tweetId} )
  //   case     => httpResponse write httpError( tweetId.httpStatusCode )
  // }



// every call to this class is automatically async, and for clarity must be marked as async
// only one call may progress at a time due to shared state
actor MonitoringService {
  private file = ...

  debug( msg:String ) : void = if ( isDebugEnabled ) file.write(msg)

  warn( msg:String ) : void throws IOException {
     if ( isWarnEnabled ) file.write(msg)
  }
}


// method attributes:  isBlocking, isImmutable   (or couldBlock, couldAccessSharedMutableState

couldBlock - scheduled to the blockable pool of threads vs the high cpu throughput pool of threads
couldAccessSharedMutableState - only one thread allowed within the class at once vs hardware limit only




Flatten
--------

flatten log = new Log()
    // results in pass through methods for each of the public methods on the class Log

flatten ILog log = new Log()
    // results in pass through methods for each ofthe public methods on the interface ILog to the instance of new Log()



Closures
------

foo = `1 + 2`
foo = `f(a:int, b:int) = a+b`
foo = `f(a:int, b:int) = {
          a+b
        }`

Strings
------

Constants:   'hello world'
Evaluate:    "hello ${arg}"
MultiLine includes whitespace and new line:   "hello
    world"
MultiLine that infers indents: """
                                    Hello
                                    ${name}
                               """
''' may also be used


XML
---

v = <book>$name</book>
v = <book>LOTR</book>

v =
  <book>
    <name>LOTR</name>
    <credits>
      for ( c : credits ) {
        <credit>${c.name}</credit>
      }
    </credits>
  </book>

or by letting credit handle its own xml

v =
  <book>
    <name>LOTR</name>
    <credits>
      for ( c : $credits ) {
        $c
      }

      foreach $credits
    </credits>
  </book>

inc native support for walking xml

v/book/name        // returns LOTR
v/book/credits     // list of credits
v/book/credits[0]  // first credit
v/book["title"]    // attribute
v/$tagname         // support dynamic paths
v/book[$attr]      // support dynamic attributes

JSON
----

v = {'name':$name}
v = {"name":"LOTR"}

inc native support for walking json

v/book/name        // returns LOTR
v/book/credits     // list of credits
v/book/credits[0]  // first credit
v/$tagname         // support dynamic paths

SQL
---

fetch(id:String) = select ClassName(col_name) from books where id=$id

fetch(id:String) = {
  select ClassName(col_name) from books

  if ( id != null ) {
    where id=$id
  }
}

// implicitly starts/stops transaction
fetch("12")

// explicit transaction demarcation
db transaction {
  fetch("12")
  insert("foo")
}

// custom error handling
db transaction {
  fetch("12")
  insert("foo")


  catch ex:SQLException =
  catch ex              =
}

// custom error handling
db transaction {
  fetch("12")
  insert("foo")


  catch ex:SQLException:
  catch SQLException:        // implicit ex declaration
  catch SQLException(msg):   // uses extractor

    retry       // automatically support transaction retries, with rethrow exception if max retry fails
  catch ex:

  on Commit:
  on Rollback:
}

signature for transaction method


transaction( f:Function[void] ) = {
  f.registerEvent( Commit )       // compiler turns this function call into an attribute of the declaration for f
  f.registerEvent( Rollback )

}



Extractors
-------

Class(a:String,b:int)


supports extractors that exactly match

case Class(a,b):

but also those with subsets where the variable names match

case Class(b):

var names can be renamed

case Class(newVarName=b):


supports conditionals


case Class(a,b) if ( a == null ):


Eval
---

eval( "code" )   // compiles and executes the specified code; using the current 'scope' of the point where eval was called


restrict-scope(a,b,c) {   // removes everything from scope except the values a,b,c
  eval( "code" )   // compiles and executes the specified code; using the current 'scope' of the point where eval was called
}

renames the variables that are accessable


restrict-scope(f1=a,f2=b,f3=c) {
  eval( "code" )   // compiles and executes the specified code; using the current 'scope' of the point where eval was called
}

reduces nesting by saying that scope is reduced from this point on

restrict-scope(f1=a,f2=b,f3=c)
eval( "code" )


Shell Scripting
--------

shell {
  output  = /a/b/foo a b <- stream

  ~/bar | grep 'error' | sed 's/a/b/g'

  on ExitCodeFailure:       // if any of the shell commands return non-zero
  on MissingShellCommand:   // if any of the shell commands (such as grep, or ~/bar) cannot be found
}


GUI Layout
--------

window    = new Window
nameField = new InputField
nameLabel = new Label('Name')


window layout {
  nameLabel,nameField
}


Self Return Types
-------------

withName(name:String):S = this.name = name

visitMethod:S {
  do work
}

// type 'S' automatically becomes the name of the class where the method was called, no need for a return as
// 'return this' will be added automatically

